from config import TELEGRAM_TOKEN
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton,\
    InlineKeyboardMarkup, InlineKeyboardButton

from main import get_group_list, get_sql_class_time_list

bot = Bot(token=TELEGRAM_TOKEN)  # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
dp = Dispatcher(bot)  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)  # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /test1
@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
    await message.reply("Test 1")


button_hi = KeyboardButton('–ü—Ä–∏–≤–µ—Ç üëã')

greet_kb = ReplyKeyboardMarkup()
greet_kb.add(button_hi)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç!', reply_markup=greet_kb)


greet_kb1 = ReplyKeyboardMarkup(resize_keyboard=True).add(button_hi)


@dp.message_handler(commands=['hi1'])
async def process_hi1_command(message: types.Message):
    await message.reply('–ü–µ—Ä–≤–æ–µ - –∏–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã', reply_markup=greet_kb1)


greet_kb2 = ReplyKeyboardMarkup(
    resize_keyboard=True, one_time_keyboard=True
).add(button_hi)


@dp.message_handler(commands=['hi2'])
async def process_hi2_command(message: types.Message):
    await message.reply("–í—Ç–æ—Ä–æ–µ - –ø—Ä—è—á–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è", reply_markup=greet_kb2)


button1 = KeyboardButton('1Ô∏è‚É£')
button2 = KeyboardButton('2Ô∏è‚É£')
button3 = KeyboardButton('3Ô∏è‚É£')

markup3 = ReplyKeyboardMarkup().add(
    button1).add(button2).add(button3)  # —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –æ–¥–Ω—É –ø–æ–¥ –æ–¥–Ω–æ–π

markup4 = ReplyKeyboardMarkup().row(
    button1, button2, button3
)

markup5 = ReplyKeyboardMarkup().row(
    button1, button2, button3
).add(KeyboardButton('–°—Ä–µ–¥–Ω–∏–π —Ä—è–¥'))

button4 = KeyboardButton('4Ô∏è‚É£')
button5 = KeyboardButton('5Ô∏è‚É£')
button6 = KeyboardButton('6Ô∏è‚É£')
markup5.row(button4, button5)
markup5.insert(button6)


@dp.message_handler(commands=['hi3'])
async def process_hi3_command(message: types.Message):
    await message.reply("–¢—Ä–µ—Ç—å–µ - –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫", reply_markup=markup3)


@dp.message_handler(commands=['hi4'])
async def process_hi4_command(message: types.Message):
    await message.reply("–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ - —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥", reply_markup=markup4)


@dp.message_handler(commands=['hi5'])
async def process_hi5_command(message: types.Message):
    await message.reply("–ü—è—Ç–æ–µ - –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫", reply_markup=markup5)

inline_btm_1 = InlineKeyboardButton("–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!", callback_data='button1')
inline_kb1 = InlineKeyboardMarkup().add(inline_btm_1)


@dp.message_handler(commands=['1'])
async def process_command_1(message: types.Message):
    await message.reply(get_group_list(), reply_markup=inline_kb1)


@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')


@dp.message_handler(lambda message: message.text.startswith('/classtime'))
async def get_list_class_time(message: types.Message):
    """–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    group_id = int(message.text[10:])
    class_time_text = get_sql_class_time_list(group_id)
    print(class_time_text)
    answer_message = class_time_text
    await message.answer(answer_message)


if __name__ == "__main__":
    executor.start_polling(dp)
