"""–ë–æ—Ç –Ø–∑—ã–∫–æ–≤–æ–π —Å—Ç—É–¥–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫, –≥—Ä—É–ø–ø, –∫–ª–∞—Å—Å–æ–≤, –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è—Ç–∏–π"""

from datetime import timedelta
from email import message
import logging
import re

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton,\
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from business import get_groups_list, get_class_time, get_teacher_list, \
    create_new_group, create_new_user, get_class_rooms_list, get_one_group, check_class_time_busy, \
    add_date, add_time, get_schedule_teacher, get_groups_reservation_text
from stategroup import GradeSearchStatesGroup, GroupStatesGroup, UserStatesGroup, \
    ClassTimeStatesGroup

from config import TELEGRAM_TOKEN, ADMIN_ID, CHANNEL_ID


bot = Bot(token=TELEGRAM_TOKEN)  # –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
dp = Dispatcher(bot,
                storage=MemoryStorage())  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)  # –í–∫–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è


acl = (172457394,)
# def admin_only_f(message):
#     if message.from_user.id not in acl:
#         return True
#     else:
#         print(message.from_user.id)
admin_only = lambda message: message.from_user.id in ADMIN_ID


async def send_message_chanel(text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    await bot.send_message(CHANNEL_ID, text)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–π–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏"""
    await bot.send_message(chat_id=message.from_user.id,
                           text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
                           reply_markup=get_start_ikb())


def get_start_ikb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤—ã–µ: –ó–∞–ø–∏—Å–∞—Ç—å—Å—è, —É—á–µ–Ω–∏–∫—É, —É—á–∏—Ç–µ–ª—é"""
    ikb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É üá¨üáß', callback_data='reservation')],
        [InlineKeyboardButton('–£—á–µ–Ω–∏–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì', callback_data='user_schedule')],
        [InlineKeyboardButton('–£—á–∏—Ç–µ–ª—é üë®‚Äçüè´', callback_data='edit')],
    ], reply_markup=ReplyKeyboardRemove())
    return ikb


def get_start_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton('/edit')],
        [KeyboardButton('/start')],
        [KeyboardButton('/back')],
    ], resize_keyboard=True)
    return kb


def get_cancel_kb() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton('/cancel')]
    ], resize_keyboard=True)
    return kb


@dp.callback_query_handler(admin_only, text='edit')
async def cb_teacher_keyboard(callback: types.CallbackQuery) -> None:
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É—á–∏—Ç–µ–ª—é"""
    await callback.message.delete()
    await callback.message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:',
                                  reply_markup=get_edit_all_data_ikb())



def get_edit_all_data_ikb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∫–Ω–æ–ø–∫–∏ ++++"""
    ikb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton('–î–æ–±.|—É–¥–∞–ª–∏—Ç—å|–ø–æ–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='tasks_group')],
        [InlineKeyboardButton('–î–æ–±.|—É–¥–∞–ª–∏—Ç—å|–ø–æ–ø—Ä–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞', callback_data='tasks_user')],
        [InlineKeyboardButton('–î–æ–±.|—É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π', callback_data='tasks_class_time')],
        [InlineKeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–∏—Ç–µ–ª–µ–π', callback_data='teacher_schedule')],
    ], reply_markup=ReplyKeyboardRemove())
    return ikb


@dp.callback_query_handler(admin_only, text='tasks_group')
async def cb_tasks_group(callback: types.CallbackQuery) -> None:
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å|—É–¥–∞–ª–∏—Ç—å|–ø–æ–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"""
    await callback.message.delete()
    await callback.message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:',
                                  reply_markup=get_tasks_group_ikb())



def get_tasks_group_ikb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã, –î–æ–±–∞–≤–∏—Ç—å|—É–¥–∞–ª–∏—Ç—å|–ø–æ–ø—Ä–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"""
    ikb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='add_new_group')],
        [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='remove_group')],
        [InlineKeyboardButton('–ü–æ–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã', callback_data='fix_group')],
        [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='edit')],
    ], reply_markup=ReplyKeyboardRemove())
    return ikb


@dp.callback_query_handler(admin_only, text='tasks_user')
async def cb_tasks_groups(callback: types.CallbackQuery) -> None:
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å|—É–¥–∞–ª–∏—Ç—å|–ø–æ–ø—Ä–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"""
    await callback.message.delete()
    await callback.message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:',
                                  reply_markup=get_tasks_user_ikb())



def get_tasks_user_ikb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞, –î–æ–±–∞–≤–∏—Ç—å|—É–¥–∞–ª–∏—Ç—å|–ø–æ–ø—Ä–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"""
    ikb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞', callback_data='add_new_user')],
        [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞', callback_data='remove_user')],
        [InlineKeyboardButton('–ü–æ–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞', callback_data='fix_user')],
        [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='edit')],
    ], reply_markup=ReplyKeyboardRemove())
    return ikb


@dp.callback_query_handler(admin_only, text='tasks_class_time')
async def cb_tasks_class_time(callback: types.CallbackQuery) -> None:
    """–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å|—É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π"""
    await callback.message.delete()
    await callback.message.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:',
                                  reply_markup=get_tasks_class_time_ikb())



def get_tasks_class_time_ikb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞, –î–æ–±–∞–≤–∏—Ç—å|—É–¥–∞–ª–∏—Ç—å|–ø–æ–ø—Ä–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"""
    ikb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π', callback_data='add_class_time')],
        [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π', callback_data='remove_class_time')],
        [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='edit')],
    ], reply_markup=ReplyKeyboardRemove())
    return ikb


@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ...', reply_markup=get_start_ikb())


@dp.callback_query_handler(text='user_schedule')
async def cb_group_schedule(callback: types.CallbackQuery) -> None:
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    await callback.message.delete()
    await callback.message.answer(get_groups_list(schedule=True))


@dp.message_handler(lambda message: message.text.startswith('/classtime'))
async def get_list_class_time(message: types.Message):
    """–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    group_id = int(message.text[10:])
    class_time_text = get_class_time(group_id, is_edit=False)
    await message.answer(class_time_text)


@dp.callback_query_handler(text='teacher_schedule')
async def cb_teacher_schedule(callback: types.CallbackQuery) -> None:
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É—á–∏—Ç–µ–ª—è"""
    await callback.message.delete()
    await callback.message.answer(get_teacher_list(schedule=1))


@dp.message_handler(lambda message: message.text.startswith('/schedule'))
async def get_schedule_teachers(message: types.Message):
    """–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_name = int(message.text[9:])
    schedule_teacher_text = get_schedule_teacher(teacher_name)
    await message.answer(schedule_teacher_text)


@dp.callback_query_handler(text='add_new_group')
async def cb_add_new_group(callback: types.CallbackQuery) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É"""
    await callback.message.delete()
    await callback.message.answer('–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã!',
                                  reply_markup=get_cancel_kb())
    await GroupStatesGroup.name.set()


@dp.message_handler(state=GroupStatesGroup.name)
async def handle_group_name(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É - 2 –ø—É–Ω–∫—Ç"""
    async with state.proxy() as data:
        data['name'] = message.text
    await message.reply('–ö–æ–ª-–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ. –ü—Ä–∏–º–µ—Ä: 6')
    await GroupStatesGroup.next()


@dp.message_handler(state=GroupStatesGroup.quota)
async def handle_group_quota(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É - 3 –ø—É–Ω–∫—Ç"""
    async with state.proxy() as data:
        data['quota'] = int(message.text)
    await message.reply('–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ —Ä. –ü—Ä–∏–º–µ—Ä: 650')
    await GroupStatesGroup.next()


@dp.message_handler(state=GroupStatesGroup.price)
async def handle_group_price(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É - 4 –ø—É–Ω–∫—Ç"""
    async with state.proxy() as data:
        data['price'] = int(message.text)
    await message.reply('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä: 60')
    await GroupStatesGroup.next()


@dp.message_handler(state=GroupStatesGroup.duration)
async def handle_group_duration(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É - 5 –ø—É–Ω–∫—Ç"""
    async with state.proxy() as data:
        data['duration'] = int(message.text)
    await message.reply('–û–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: -')
    await GroupStatesGroup.next()


@dp.message_handler(state=GroupStatesGroup.description)
async def handle_group_description(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É - 6 –ø—É–Ω–∫—Ç"""
    async with state.proxy() as data:
        data['description'] = message.text
    await message.reply('–ö–∞–∫–∏–µ —à–∫–æ–ª. –∫–ª–∞—Å—Å—ã –∑–∞–Ω–∏–º–∞—é—Ç—Å—è, —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: 1 2 3')
    await GroupStatesGroup.next()


@dp.message_handler(state=GroupStatesGroup.grade)
async def handle_group_grade(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É - 7 –ø—É–Ω–∫—Ç"""
    try:
        async with state.proxy() as data:
            data['grade'] = [int(i) for i in message.text.split()]  # –†–∞–∑–¥–µ–ª—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–∏—Ñ—Ä—ã
        await message.reply(f'–ö—Ç–æ –≤–µ–¥–µ—Ç —ç—Ç—É –≥—Ä—É–ø–ø—É –≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É –ø—Ä–µ–ø–æ–¥.\n{get_teacher_list(schedule=2)}\n –ü—Ä–∏–º–µ—Ä: 1')
        await GroupStatesGroup.next()
    except ValueError:
        await message.reply('–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ\n'
        '–ö–∞–∫–∏–µ —à–∫–æ–ª. –∫–ª–∞—Å—Å—ã –∑–∞–Ω–∏–º–∞—é—Ç—Å—è, —Ü–∏—Ñ—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: 1 2 3')


@dp.message_handler(state=GroupStatesGroup.teacher_id)
async def handle_group_teacher_id(message: types.Message, state: FSMContext) -> None:
    """–ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –≤ –ë–î –∏ –≤—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç"""
    async with state.proxy() as data:
        data['teacher_id'] = int(message.text)
    create_new_group(name=data['name'], quota=data['quota'],
                     price=data['price'], duration=data['duration'],
                     description=data['description'], grades=data['grade'],
                     teacher_id=data['teacher_id'])

    await message.reply('–°–ø–∞—Å–∏–±–æ –≥—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞', reply_markup=get_start_kb())
    await state.finish()


@dp.callback_query_handler(text='reservation')
async def cb_search_group_by_grade(callback: types.CallbackQuery) -> None:
    """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–ª–∞—Å—Å–∞–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    await callback.message.delete()
    await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª–∞—Å—Å –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∏—Ç–µ—Å—å –≤—ã –∏–ª–∏ –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫, 0 - –¥–æ—à–∫–æ–ª—å–Ω–∏–∫, 12 - —Å—Ç—É–¥–µ–Ω—Ç, 13 - –≤–∑—Ä–æ—Å–ª—ã–π',
                                  reply_markup=get_cancel_kb())
    await GradeSearchStatesGroup.grade_name.set()


@dp.message_handler(state=GradeSearchStatesGroup.grade_name)
async def cb_search_group_by_grade_grade_name(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–ª–∞—Å—Å–∞–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    async with state.proxy() as data:
        data['grade_name'] = int(message.text)
    group_list = get_groups_reservation_text(grade_number=data['grade_name'])
    await message.reply(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏—é: \n{group_list}')
    await GradeSearchStatesGroup.group_id.set()



@dp.message_handler(state=GradeSearchStatesGroup.group_id)
async def cb_search_group_by_grade_group_id(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–ª–∞—Å—Å–∞–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    async with state.proxy() as data:
        data['group_id'] = (message.text)
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –∏ –≤–∞—à–µ –∏–º—è:\n')
    await GradeSearchStatesGroup.contact_info.set()


@dp.message_handler(state=GradeSearchStatesGroup.contact_info)
async def cb_search_group_by_grade_contact_info(message: types.Message, state: FSMContext) -> None:
    """–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø –ø–æ –∫–ª–∞—Å—Å–∞–º –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    async with state.proxy() as data:
        data['contact_info'] = (message.text)
    await message.reply('–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, –º—ã –æ–±—è–∑—è—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è')
    text_reservation = get_groups_reservation_text(grade_number=data['grade_name'])
    text_reservation += f"\n\ncontact - {data['contact_info']}\n group: {data['group_id']}. grade - {data['grade_name']}"
    await send_message_chanel(text_reservation)
    await state.finish()


@dp.callback_query_handler(text='add_new_user')
async def cb_add_new_user(callback: types.CallbackQuery) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    await callback.message.delete()
    await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞!',
                                  reply_markup=get_cancel_kb())
    await UserStatesGroup.first_name.set()


@dp.message_handler(state=UserStatesGroup.first_name)
async def cb_add_new_user_first_name(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    async with state.proxy() as data:
        data['first_name'] = message.text
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏–µ —É—á–µ–Ω–∏–∫–∞')
    await UserStatesGroup.next()


@dp.message_handler(state=UserStatesGroup.last_name)
async def cb_add_new_user_last_name(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    async with state.proxy() as data:
        data['last_name'] = message.text
    await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥')
    await UserStatesGroup.next()


@dp.message_handler(state=UserStatesGroup.town)
async def cb_add_new_user_town(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    async with state.proxy() as data:
        data['town'] = message.text
    await message.reply('–û–ø–∏—Å–∞–Ω–∏–µ, –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –Ω–æ–º. —Ç–µ–ª. —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–æ—á–µ–µ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ')
    await UserStatesGroup.next()


@dp.message_handler(state=UserStatesGroup.description)
async def cb_add_new_user_description(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    async with state.proxy() as data:
        data['description'] = message.text
    await message.reply('–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 25.11.1998')
    await UserStatesGroup.next()


@dp.message_handler(state=UserStatesGroup.birthday)
async def cb_add_new_user_birthday(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    async with state.proxy() as data:
        data['birthday'] = add_date(message.text)
    await message.reply('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8 962 412 50 81')
    await UserStatesGroup.next()


@dp.message_handler(state=UserStatesGroup.phone_number)
async def cb_add_new_user_phone_number(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    async with state.proxy() as data:
        data['phone_number'] = message.text
    await message.reply(f'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: 2\n'
                        f'{get_groups_list(schedule=False)}')
    await UserStatesGroup.next()


@dp.message_handler(state=UserStatesGroup.group_id)
async def cb_add_new_user_group_id(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–∞"""
    async with state.proxy() as data:
        data['group_id'] = message.text
    create_new_user(first_name=data['first_name'], last_name=data['last_name'],
                    town=data['town'], description=data['description'], birthday=data['birthday'],
                    phone_number=data['phone_number'], group_id=data['group_id'], is_active=True)

    await message.reply('–°–ø–∞—Å–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', reply_markup=get_start_kb())
    await state.finish()


@dp.callback_query_handler(text='add_class_time')
async def cb_add_classtime(callback: types.CallbackQuery) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    await callback.message.delete()
    await callback.message.answer(f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä—É. –ü—Ä–∏–º–µ—Ä: 5\n{get_groups_list(schedule=False)}',
                                  reply_markup=get_cancel_kb())
    await ClassTimeStatesGroup.group_id.set()


@dp.message_handler(state=ClassTimeStatesGroup.group_id)
async def cb_add_classtime_group_id(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    async with state.proxy() as data:
        data['group_id'] = int(message.text)

    await message.reply(f'{get_class_time(data["group_id"], is_edit=True)} –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞. –ü—Ä–∏–º–µ—Ä 1\n'
                        f'{get_class_rooms_list()}')
    await ClassTimeStatesGroup.next()


@dp.message_handler(state=ClassTimeStatesGroup.class_room_id)
async def cb_add_classtime_class_room_id(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    async with state.proxy() as data:
        data['class_room_id'] = int(message.text)

    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Ü–∏—Ñ—Ä–æ–π 1-–ø–Ω, 2-–≤—Ç, 3-—Å—Ä, –¥–∞–ª–µ–µ 09-00.\n'
                        '–ü—Ä–∏–º–µ—Ä: 5 17-30\n')
    await ClassTimeStatesGroup.next()


@dp.message_handler(state=ClassTimeStatesGroup.start_time)
async def cb_add_classtime_start_time(message: types.Message, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è—Ç–æ –ª–∏ —ç—Ç–æ –≤—Ä–µ–º—è –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –∏ –ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    try:
        async with state.proxy() as data:
            times = re.split(' |-', message.text)
            data['start_time'] = add_time(day=int(times[0]), hour=int(times[1]), minute=int(times[2]))
            duration = get_one_group(group_id=data['group_id'])[1]
            data['end_time'] = data['start_time'] + timedelta(minutes=duration)
    except ValueError:
        await message.reply('–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ')
    check_class_time_list = check_class_time_busy(start_time=data['start_time'], end_time=data['end_time'],
                                                  class_room_id=data['class_room_id'], group_id=data['group_id'])
    if check_class_time_list[0]:
        await message.reply(check_class_time_list[1])
        await state.finish()
    else:
        await message.reply(check_class_time_list[1])


if __name__ == "__main__":
    executor.start_polling(dp)
